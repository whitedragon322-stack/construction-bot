import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import Database
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO)
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()
db = Database('construction.db')

ADMIN_ID = int(os.getenv('ADMIN_ID', 803673763))

class ReportStates(StatesGroup):
    waiting_for_report = State()
    waiting_for_fio = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ú–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–µ –¥–æ–º–∞")],
            [types.KeyboardButton(text="–î–æ–º–∞")],
            [types.KeyboardButton(text="–°–µ–∫—Ü–∏–∏")],
            [types.KeyboardButton(text="–î—É–ø–ª–µ–∫—Å—ã")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
def get_after_report_keyboard(object_type, object_id, apartment_id=None):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ—Ç—á–µ—Ç", 
                                  callback_data=f"add_more:{object_type}:{object_id}:{apartment_id or ''}")],
        [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", 
                                  callback_data=f"back:{object_type}:{object_id}:{apartment_id or ''}")],
        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                                  callback_data="main_menu")]
    ])
    return keyboard

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    
    if not user:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        await state.set_state(ReportStates.waiting_for_fio)
    else:
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

@dp.message(ReportStates.waiting_for_fio)
async def process_fio(message: types.Message, state: FSMContext):
    fio = message.text
    db.add_user(message.from_user.id, message.from_user.username, fio)
    await state.clear()
    await message.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {fio}!", reply_markup=get_main_keyboard())
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
@dp.callback_query(F.data.startswith("add_more:"))
async def add_more_report(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data.split(":")
    object_type = data[1]
    object_id = data[2]
    apartment_id = data[3] if data[3] else None
    
    obj = db.get_object(object_id)
    if apartment_id and apartment_id != "None":
        apartment = db.get_apartment(apartment_id)
        address_text = f"{obj[1]}, –∫–≤. {apartment[2]}"
    else:
        address_text = obj[1]
    
    await callback.message.answer(f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è {address_text}:")
    await state.update_data(object_type=object_type, object_id=object_id, apartment_id=apartment_id)
    await state.set_state(ReportStates.waiting_for_report)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(F.data.startswith("back:"))
async def back_to_list(callback: types.CallbackQuery):
    data = callback.data.split(":")
    object_type = data[1]
    object_id = data[2]
    apartment_id = data[3] if data[3] else None
    
    if apartment_id and apartment_id != "None":
        # –ï—Å–ª–∏ –±—ã–ª–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –∫–≤–∞—Ä—Ç–∏—Ä
        apartments = db.get_apartments(object_id)
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
        for apt in apartments:
            keyboard.inline_keyboard.append([
                types.InlineKeyboardButton(text=f"–ö–≤. {apt[1]}", callback_data=f"apartment:{apt[0]}")
            ])
        await callback.message.answer("üè† –í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É:", reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –æ–±—ä–µ–∫—Ç–æ–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        objects = db.get_objects_by_type(object_type)
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
        for obj in objects:
            keyboard.inline_keyboard.append([
                types.InlineKeyboardButton(text=obj[1], callback_data=f"object:{obj[0]}")
            ])
        await callback.message.answer("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=keyboard)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query(F.data == "main_menu")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
    await callback.answer()

# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="admin_add_object")],
        [types.InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç—ã", callback_data="admin_view_reports")],
        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main_menu")]
    ])
    
    await message.answer("üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
    db.create_tables()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    db.add_user(ADMIN_ID, "admin", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "admin")
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    dp.run_polling(bot)
